============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- /Users/igorpotemkin/PycharmProjects/Module_3/coursework3/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/igorpotemkin/PycharmProjects/Module_3/coursework3/tests/test_views
plugins: anyio-3.4.0, cov-3.0.0
collecting ... collected 1 item

test_directors.py::TestDirectorsView::test_many 2021-12-10 12:26:20,417 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2021-12-10 12:26:20,417 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("genre")
2021-12-10 12:26:20,417 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,418 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("genre")
2021-12-10 12:26:20,418 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,418 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("user")
2021-12-10 12:26:20,418 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,419 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("user")
2021-12-10 12:26:20,419 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,419 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("director")
2021-12-10 12:26:20,419 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,419 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("director")
2021-12-10 12:26:20,419 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,419 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("movie")
2021-12-10 12:26:20,420 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,420 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("movie")
2021-12-10 12:26:20,420 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,420 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("favorite_movie")
2021-12-10 12:26:20,420 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,420 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("favorite_movie")
2021-12-10 12:26:20,421 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,421 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("r_token")
2021-12-10 12:26:20,421 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,421 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("r_token")
2021-12-10 12:26:20,421 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,422 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("genre")
2021-12-10 12:26:20,422 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,422 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("genre")
2021-12-10 12:26:20,422 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,422 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("user")
2021-12-10 12:26:20,422 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,423 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("user")
2021-12-10 12:26:20,423 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,423 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("director")
2021-12-10 12:26:20,423 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,423 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("director")
2021-12-10 12:26:20,423 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,423 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("movie")
2021-12-10 12:26:20,424 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,424 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("movie")
2021-12-10 12:26:20,424 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,424 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("favorite_movie")
2021-12-10 12:26:20,424 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,424 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("favorite_movie")
2021-12-10 12:26:20,424 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,425 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("r_token")
2021-12-10 12:26:20,425 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,425 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("r_token")
2021-12-10 12:26:20,425 INFO sqlalchemy.engine.Engine [raw sql] ()
2021-12-10 12:26:20,426 INFO sqlalchemy.engine.Engine 
CREATE TABLE genre (
	id INTEGER NOT NULL, 
	name VARCHAR, 
	PRIMARY KEY (id)
)


2021-12-10 12:26:20,426 INFO sqlalchemy.engine.Engine [no key 0.00014s] ()
2021-12-10 12:26:20,426 INFO sqlalchemy.engine.Engine 
CREATE TABLE director (
	id INTEGER NOT NULL, 
	name VARCHAR, 
	PRIMARY KEY (id)
)


2021-12-10 12:26:20,426 INFO sqlalchemy.engine.Engine [no key 0.00015s] ()
2021-12-10 12:26:20,427 INFO sqlalchemy.engine.Engine 
CREATE TABLE r_token (
	id INTEGER NOT NULL, 
	token VARCHAR NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (token)
)


2021-12-10 12:26:20,427 INFO sqlalchemy.engine.Engine [no key 0.00014s] ()
2021-12-10 12:26:20,428 INFO sqlalchemy.engine.Engine 
CREATE TABLE user (
	id INTEGER NOT NULL, 
	password VARCHAR, 
	role VARCHAR, 
	email VARCHAR NOT NULL, 
	name VARCHAR(100), 
	surname VARCHAR(100), 
	favorite_genre INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(favorite_genre) REFERENCES genre (id)
)


2021-12-10 12:26:20,428 INFO sqlalchemy.engine.Engine [no key 0.00014s] ()
2021-12-10 12:26:20,428 INFO sqlalchemy.engine.Engine CREATE UNIQUE INDEX ix_user_email ON user (email)
2021-12-10 12:26:20,429 INFO sqlalchemy.engine.Engine [no key 0.00024s] ()
2021-12-10 12:26:20,429 INFO sqlalchemy.engine.Engine 
CREATE TABLE movie (
	id INTEGER NOT NULL, 
	description VARCHAR NOT NULL, 
	director_id INTEGER NOT NULL, 
	genre_id INTEGER NOT NULL, 
	rating FLOAT, 
	title VARCHAR NOT NULL, 
	trailer VARCHAR, 
	year INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(director_id) REFERENCES director (id), 
	FOREIGN KEY(genre_id) REFERENCES genre (id)
)


2021-12-10 12:26:20,430 INFO sqlalchemy.engine.Engine [no key 0.00017s] ()
2021-12-10 12:26:20,430 INFO sqlalchemy.engine.Engine 
CREATE TABLE favorite_movie (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	movie_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES user (id), 
	FOREIGN KEY(movie_id) REFERENCES movie (id)
)


2021-12-10 12:26:20,430 INFO sqlalchemy.engine.Engine [no key 0.00014s] ()
2021-12-10 12:26:20,430 INFO sqlalchemy.engine.Engine COMMIT
2021-12-10 12:26:20,436 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2021-12-10 12:26:20,437 INFO sqlalchemy.engine.Engine INSERT INTO director (id, name) VALUES (?, ?)
2021-12-10 12:26:20,437 INFO sqlalchemy.engine.Engine [generated in 0.00027s] (1, 'Spillberg')
FAILED2021-12-10 12:26:20,612 INFO sqlalchemy.engine.Engine ROLLBACK


=================================== FAILURES ===================================
_________________________ TestDirectorsView.test_many __________________________

self = <tests.test_views.test_directors.TestDirectorsView object at 0x10bed3700>
client = <fastapi.applications.FastAPI object at 0x10b98f0a0>
director = <app.dao.model.directors.Director object at 0x10bed3580>

    def test_many(self, client, director):
        response = requests.get("http://localhost:8000/directors/")
        assert response.status_code == HTTPStatus.OK
>       assert response.json() == [{"id": director.id, "name": director.name}]
E       AssertionError: assert [{'id': 1, 'name': 'Тейлор Шеридан'},\n {'id': 2, 'name': 'Квентин Тарантино'},\n {'id': 3, 'name': 'Владимир Вайншток'},\n {'id': 4, 'name': 'Декстер Флетчер'},\n {'id': 5, 'name': 'Стив Энтин'},\n {'id': 6, 'name': 'Роб Маршалл'},\n {'id': 7, 'name': 'Баз Лурман'},\n {'id': 8, 'name': 'Дэмьен Шазелл'},\n {'id': 9, 'name': 'Пьетро Антон'},\n {'id': 10, 'name': 'Джеймс Мэнголд'},\n {'id': 11, 'name': 'Дени Вильнёв'},\n {'id': 12, 'name': 'Кирилл Серебренников'},\n {'id': 13, 'name': 'Рубен Фляйшер'},\n {'id': 14, 'name': 'Стэнли Кубрик'},\n {'id': 15, 'name': 'Ричард Келли'},\n {'id': 16, 'name': 'Пит Доктер'},\n {'id': 17, 'name': 'Кемп Пауэрс'},\n {'id': 18, 'name': 'Бибо Бержерон'},\n {'id': 19, 'name': 'Тоби Генкель'},\n {'id': 20, 'name': 'Шон Маккормак'}] == [{'id': 1, 'name': 'Spillberg'}]
E         At index 0 diff: {'id': 1, 'name': 'Тейлор Шеридан'} != {'id': 1, 'name': 'Spillberg'}
E         Left contains 19 more items, first extra item: {'id': 2, 'name': 'Квентин Тарантино'}
E         Full diff:
E           [
E            {'id': 1,
E         -   'name': 'Spillberg'},
E         +   'name': 'Тейлор Шеридан'},
E         +  {'id': 2,
E         +   'name': 'Квентин Тарантино'},
E         +  {'id': 3,
E         +   'name': 'Владимир Вайншток'},
E         +  {'id': 4,
E         +   'name': 'Декстер Флетчер'},
E         +  {'id': 5,
E         +   'name': 'Стив Энтин'},
E         +  {'id': 6,
E         +   'name': 'Роб Маршалл'},
E         +  {'id': 7,
E         +   'name': 'Баз Лурман'},
E         +  {'id': 8,
E         +   'name': 'Дэмьен Шазелл'},
E         +  {'id': 9,
E         +   'name': 'Пьетро Антон'},
E         +  {'id': 10,
E         +   'name': 'Джеймс Мэнголд'},
E         +  {'id': 11,
E         +   'name': 'Дени Вильнёв'},
E         +  {'id': 12,
E         +   'name': 'Кирилл Серебренников'},
E         +  {'id': 13,
E         +   'name': 'Рубен Фляйшер'},
E         +  {'id': 14,
E         +   'name': 'Стэнли Кубрик'},
E         +  {'id': 15,
E         +   'name': 'Ричард Келли'},
E         +  {'id': 16,
E         +   'name': 'Пит Доктер'},
E         +  {'id': 17,
E         +   'name': 'Кемп Пауэрс'},
E         +  {'id': 18,
E         +   'name': 'Бибо Бержерон'},
E         +  {'id': 19,
E         +   'name': 'Тоби Генкель'},
E         +  {'id': 20,
E         +   'name': 'Шон Маккормак'},
E           ]

test_directors.py:41: AssertionError
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:log.py:117 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("genre")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("genre")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("user")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("user")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("director")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("director")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("favorite_movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("favorite_movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("r_token")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("r_token")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("genre")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("genre")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("user")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("user")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("director")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("director")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("favorite_movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("favorite_movie")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA main.table_info("r_token")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 PRAGMA temp.table_info("r_token")
INFO     sqlalchemy.engine.Engine:log.py:117 [raw sql] ()
INFO     sqlalchemy.engine.Engine:log.py:117 
CREATE TABLE genre (
	id INTEGER NOT NULL, 
	name VARCHAR, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:log.py:117 [no key 0.00014s] ()
INFO     sqlalchemy.engine.Engine:log.py:117 
CREATE TABLE director (
	id INTEGER NOT NULL, 
	name VARCHAR, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:log.py:117 [no key 0.00015s] ()
INFO     sqlalchemy.engine.Engine:log.py:117 
CREATE TABLE r_token (
	id INTEGER NOT NULL, 
	token VARCHAR NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (token)
)


INFO     sqlalchemy.engine.Engine:log.py:117 [no key 0.00014s] ()
INFO     sqlalchemy.engine.Engine:log.py:117 
CREATE TABLE user (
	id INTEGER NOT NULL, 
	password VARCHAR, 
	role VARCHAR, 
	email VARCHAR NOT NULL, 
	name VARCHAR(100), 
	surname VARCHAR(100), 
	favorite_genre INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(favorite_genre) REFERENCES genre (id)
)


INFO     sqlalchemy.engine.Engine:log.py:117 [no key 0.00014s] ()
INFO     sqlalchemy.engine.Engine:log.py:117 CREATE UNIQUE INDEX ix_user_email ON user (email)
INFO     sqlalchemy.engine.Engine:log.py:117 [no key 0.00024s] ()
INFO     sqlalchemy.engine.Engine:log.py:117 
CREATE TABLE movie (
	id INTEGER NOT NULL, 
	description VARCHAR NOT NULL, 
	director_id INTEGER NOT NULL, 
	genre_id INTEGER NOT NULL, 
	rating FLOAT, 
	title VARCHAR NOT NULL, 
	trailer VARCHAR, 
	year INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(director_id) REFERENCES director (id), 
	FOREIGN KEY(genre_id) REFERENCES genre (id)
)


INFO     sqlalchemy.engine.Engine:log.py:117 [no key 0.00017s] ()
INFO     sqlalchemy.engine.Engine:log.py:117 
CREATE TABLE favorite_movie (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	movie_id INTEGER NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES user (id), 
	FOREIGN KEY(movie_id) REFERENCES movie (id)
)


INFO     sqlalchemy.engine.Engine:log.py:117 [no key 0.00014s] ()
INFO     sqlalchemy.engine.Engine:log.py:117 COMMIT
INFO     sqlalchemy.engine.Engine:log.py:117 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:log.py:117 INSERT INTO director (id, name) VALUES (?, ?)
INFO     sqlalchemy.engine.Engine:log.py:117 [generated in 0.00027s] (1, 'Spillberg')
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:log.py:117 ROLLBACK
=========================== short test summary info ============================
FAILED test_directors.py::TestDirectorsView::test_many - AssertionError: asse...
============================== 1 failed in 0.45s ===============================
